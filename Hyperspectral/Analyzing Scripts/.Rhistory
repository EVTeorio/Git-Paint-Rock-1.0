winsorize_data <- function(x) {
# Apply Winsorization to reduce extreme outliers
Winsorize(x, trim = 0.01)  # Capping extreme values to the 1st and 99th percentiles (trim = 0.01)
}
# Apply the transformations to each spectral column
df_transformed <- df
# Apply transformations to each spectral column
for (column in spectral_columns) {
# Log transform the spectral column to handle skewed data
df_transformed[[column]] <- log_transform(df_transformed[[column]])
# Apply Winsorization to limit extreme values
df_transformed[[column]] <- winsorize_data(df_transformed[[column]])
}
# Winsorization function (capping values beyond the 1st and 99th percentile)
winsorize_data <- function(x) {
# Apply Winsorization to reduce extreme outliers
Winsorize(x, probs = c(0.01, 0.99))  # Capping extreme values to 1st and 99th percentiles
}
# Apply the transformations to each spectral column
df_transformed <- df
# Apply transformations to each spectral column
for (column in spectral_columns) {
# Log transform the spectral column to handle skewed data
df_transformed[[column]] <- log_transform(df_transformed[[column]])
# Apply Winsorization to limit extreme values
df_transformed[[column]] <- winsorize_data(df_transformed[[column]])
}
# Winsorization function (capping values beyond the 1st and 99th percentile)
winsorize_data <- function(x) {
# Apply Winsorization to reduce extreme outliers
Winsorize(x, trims = 0.01)  # Capping extreme values to 1st and 99th percentiles (trims = 0.01)
}
# Apply the transformations to each spectral column
df_transformed <- df
# Apply transformations to each spectral column
for (column in spectral_columns) {
# Log transform the spectral column to handle skewed data
df_transformed[[column]] <- log_transform(df_transformed[[column]])
# Apply Winsorization to limit extreme values
df_transformed[[column]] <- winsorize_data(df_transformed[[column]])
}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(knitr)
# Read in data
df <- read.csv("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/QGIS_clean_speclib.csv")
output_dir <- "E:/Git Paint Rock 1.0/Output"
# Identify spectral columns (those starting with X)
spectral_columns <- grep("^X\\d{3}\\.\\d{3}\\.nm", colnames(df), value = TRUE)
# Function to detect outliers using IQR method
find_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
outliers <- which(x < lower_bound | x > upper_bound)
return(outliers)
}
# Create a list to store results for the report
outlier_report <- list()
# Step 1: Loop over each spectral column to identify outliers and create the report
for (column in spectral_columns) {
outliers <- find_outliers(df[[column]])
# Store the results for the report if there are outliers
if (length(outliers) > 0) {
outlier_report[[column]] <- data.frame(
Spectral_Column = column,
Outlier_Index = outliers,
Outlier_Value = df[outliers, column]
)
}
}
library(beepr)
View(outlier_report)
# Step 2: View the outlier report
outlier_report_df <- do.call(rbind, outlier_report)
View(outlier_report_df)
# Step 3: Once you're satisfied with the report, remove outliers from the dataset
df_clean <- df  # Make a copy of the original dataset for cleaning
for (column in spectral_columns) {
if (column %in% names(outlier_report)) {
# Get the indices of the outliers for this column
outliers <- outlier_report[[column]]$Outlier_Index
# Remove the outliers
df_clean <- df_clean[-outliers, ]
}
}
beep(4)
# You can now use df_clean for further analysis or save it
write.csv(df_clean,
"C:/Users/PaintRock/Documents/Data processing/Hyperspectral/Outliers_Removed.csv")
View(df_clean)
df <- df_clean
output_dir <- "E:/Git Paint Rock 1.0/Output"
# Identify spectral columns (those starting with X)
spectral_columns <- grep("^X\\d{3}\\.\\d{3}\\.nm", colnames(df), value = TRUE)
# Function to detect outliers using IQR method
find_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
outliers <- which(x < lower_bound | x > upper_bound)
return(outliers)
}
# Create a list to store results for the report
outlier_report <- list()
# Create a final report table summarizing all outliers by spectral column
final_report <- bind_rows(outlier_report, .id = "Spectral_Column")
# Loop through each spectral column and create histograms, box plots, detect outliers
for (col in spectral_columns) {
# Create histogram
p_hist <- ggplot(df, aes_string(x = col)) +
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black") +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Save histogram plot to disk
ggsave(paste0(output_dir, "histogram_", col, ".png"), p_hist)
# Create box-and-whisker plot
p_box <- ggplot(df, aes_string(x = "SpeciesID", y = col)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Box-and-Whisker Plot of", col), x = "SpeciesID", y = col) +
theme_minimal()
# Save box plot to disk
ggsave(paste0(output_dir, "boxplot_", col, ".png"), p_box)
# Find outliers
outliers <- find_outliers(df[[col]])
outlier_data <- df[outliers, c("SpeciesID", "TreeID", col)]
# Summarize outliers by SpeciesID and TreeID
outlier_summary <- outlier_data %>%
group_by(SpeciesID, TreeID) %>%
summarise(Outliers = n(), .groups = "drop")
# Store the outlier summary in the report list
outlier_report[[col]] <- outlier_summary
}
beep(3)
library(tidyr)
# Gather all spectral columns into long format
df_long <- df %>%
pivot_longer(cols = starts_with("X"),
names_to = "Wavelength",
values_to = "Reflectance") %>%
mutate(Wavelength = gsub("X", "", Wavelength),
Wavelength = gsub(".nm", "", Wavelength), # Clean up the wavelength names (remove 'X')
Wavelength = as.numeric(Wavelength)) %>%
filter(!is.na(Wavelength))  # Remove any rows where Wavelength is NA
# Calculate summary statistics by Wavelength
summary_stats <- df_long %>%
group_by(Wavelength) %>%
summarise(
Median_Reflectance = median(Reflectance, na.rm = TRUE),
Max_Reflectance = max(Reflectance, na.rm = TRUE),
Min_Reflectance = min(Reflectance, na.rm = TRUE),
Pct_87_5_Reflectance = quantile(Reflectance, probs = 0.875, na.rm = TRUE),
Pct_12_5_Reflectance = quantile(Reflectance, probs = 0.125, na.rm = TRUE),
Upper_Reflectance = quantile(Reflectance, probs = 0.95, na.rm = TRUE),
Lower_Reflectance = quantile(Reflectance, probs = 0.05, na.rm = TRUE)
)
beep(3)
p <- ggplot(summary_stats, aes(x = Wavelength)) +
# Shaded region for the first quantile (between 12.5% and 87.5%, light grey)
geom_ribbon(aes(ymin = Pct_12_5_Reflectance, ymax = Pct_87_5_Reflectance),
fill = "gray", alpha = 0.75) +
# Shaded region for the second quantile (between 5% and 95%, darker grey)
geom_ribbon(aes(ymin = Lower_Reflectance, ymax = Upper_Reflectance),
fill = "gray", alpha = 0.25) +
# Solid black line for the median reflectance
geom_line(aes(y = Median_Reflectance), color = "black", linewidth = 1)+
# Labels and theme adjustments
labs(title = "Reflectance Across Wavelengths",
x = "Wavelength (nm)",
y = "Reflectance") +
theme_minimal() +
theme(legend.position = "none")
View(p)
# Display the plot
print(p)
# Specify the path and filename for saving the plot
output_path <- "E:/Git Paint Rock 1.0/Output/reflectance_outliers_removed.png"
# Save the plot to the specified location
ggsave(output_path, plot = p, width = 10, height = 6)
# Load necessary libraries
library(ggplot2)
library(MASS)
# read in data
df <- read.csv("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/QGIS_clean_speclib.csv")
beep(3)
# Visualize original data distribution
ggplot(data.frame(data), aes(x = data)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
ggtitle("Original Data (Bimodal & Positively Skewed)") +
theme_minimal()
# 1. Log Transformation (for positive skewness)
log_transformed <- log(data - min(data) + 1)  # Adding 1 to avoid log(0)
# read in data
df <- read.csv("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/QGIS_clean_speclib.csv")
beep(3)
# Visualize original data distribution
ggplot(data.frame(data), aes(x = data)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
ggtitle("Original Data (Bimodal & Positively Skewed)") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
library(MASS)
# Visualize original data distribution
ggplot(data.frame(data), aes(x = data)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
ggtitle("Original Data (Bimodal & Positively Skewed)") +
theme_minimal()
# Visualize original data distribution
ggplot(data.frame(data = data), aes(x = data)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1) +
ggtitle("Original Data (Bimodal & Positively Skewed)") +
theme_minimal()
# Create histogram
p_hist <- ggplot(df, aes_string(x = col)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
str(df)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- "X396.345.nm"
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- "X568.3581nm"
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- "X568.3581nm"
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Example: assuming you want to plot the column 'X396.345.nm'
col <- "X568.581nm"
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- "X568.581.nm"
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# Load necessary libraries
library(ggplot2)
library(tidyr)
# Example: Assuming your data frame is called 'df'
# Reshape the data from wide to long format (all wavelength columns combined)
df_long <- df %>%
pivot_longer(cols = starts_with("X"),   # Select columns that start with "X"
names_to = "wavelength",    # Name of the new column for wavelength
values_to = "value")       # Name of the new column for values
# Create histogram of all wavelengths combined
p_hist_all_wavelengths <- ggplot(df_long, aes(x = value)) +
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = "Histogram of All Wavelengths Combined", x = "Wavelength Value", y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist_all_wavelengths)
# Example: Assuming your data frame is called 'df'
# Reshape the data from wide to long format (all wavelength columns combined)
df_long <- df %>%
pivot_longer(cols = starts_with("X"),   # Select columns that start with "X"
names_to = "wavelength",    # Name of the new column for wavelength
values_to = "value")       # Name of the new column for values
# Create histogram of all wavelengths combined with adjusted binwidth
p_hist_all_wavelengths <- ggplot(df_long, aes(x = value)) +
geom_histogram(binwidth = 0.05, fill = "lightblue", color = "black", alpha = 0.7) +  # Increased binwidth
labs(title = "Histogram of All Wavelengths Combined", x = "Wavelength Value", y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist_all_wavelengths)
# Create histogram of all wavelengths combined with adjusted binwidth
p_hist_all_wavelengths <- ggplot(df_long, aes(x = value)) +
geom_histogram(binwidth = 0.5, fill = "lightblue", color = "black", alpha = 0.7) +  # Increased binwidth
labs(title = "Histogram of All Wavelengths Combined", x = "Wavelength Value", y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist_all_wavelengths)
beep(3)
# Create histogram of all wavelengths combined with adjusted binwidth
p_hist_all_wavelengths <- ggplot(df_long, aes(x = value)) +
geom_histogram(binwidth = 0.1, fill = "lightblue", color = "black", alpha = 0.7) +  # Increased binwidth
labs(title = "Histogram of All Wavelengths Combined", x = "Wavelength Value", y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist_all_wavelengths)
beep(3)
# Create histogram of all wavelengths combined with adjusted binwidth
p_hist_all_wavelengths <- ggplot(df_long, aes(x = value)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +  # Increased binwidth
labs(title = "Histogram of All Wavelengths Combined", x = "Wavelength Value", y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist_all_wavelengths)
beep(3)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- "X568.581.nm"
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
data <- df
# 1. Log Transformation (for positive skewness)
log_transformed <- log(data - min(data) + 1)  # Adding 1 to avoid log(0)
View(data)
# Apply log transformation to the spectral columns
df[spectral_columns] <- lapply(df[spectral_columns], function(x) log(x - min(x) + 1))
# Identify spectral columns (those starting with X)
spectral_columns <- grep("^X\\d{3}\\.\\d{3}\\.nm", colnames(df), value = TRUE)
# Apply log transformation to the spectral columns
df[spectral_columns] <- lapply(df[spectral_columns], function(x) log(x - min(x) + 1))
beep(3)
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
View(df)
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[20]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
df <- data
# Example: assuming you want to plot the column 'X396.345.nm'
col <- df$X477.833.nm
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
View(df)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- df$X477.833.nm
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- "X568.581.nm"
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- (df$X409.309.nm)
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- "X409.309.nm"
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- "X716.741.nm"
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# 2. Square Root Transformation (for positive skewness)
df[spectral_columns] <- lapply(df[spectral_columns], function(x) sqrt(data - min(data) + 1))  # Adding 1 to avoid sqrt(0)
# 2. Square Root Transformation (for positive skewness)
df[spectral_columns] <- lapply(df[spectral_columns], function(x) sqrt(x - min(x) + 1))  # Adding 1 to avoid sqrt(0)
# 2. Square Root Transformation (for positive skewness)
df[spectral_columns] <- lapply(df[spectral_columns], function(x) sqrt(x - min(x) + 1))  # Adding 1 to avoid sqrt(0)
View(df)
View(data)
# Example: assuming you want to plot the column 'X396.345.nm'
col <- "X716.741.nm"
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# 2. Square Root Transformation (for positive skewness)
df[spectral_columns] <- lapply(df[spectral_columns], function(x) sqrt(x - min(x) + 1))  # Adding 1 to avoid sqrt(0)
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# 2. Square Root Transformation (for positive skewness)
df[spectral_columns] <- lapply(df[spectral_columns], function(x) sqrt(x - min(x) + 1))  # Adding 1 to avoid sqrt(0)
# 2. Square Root Transformation (for positive skewness)
df[spectral_columns] <- lapply(df[spectral_columns], function(x) sqrt(x - min(x) + 1))  # Adding 1 to avoid sqrt(0)
#
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
df <- data
# 2. Square Root Transformation (for positive skewness)
df[spectral_columns] <- lapply(df[spectral_columns], function(x) sqrt(x - min(x) + 1))  # Adding 1 to avoid sqrt(0)
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# 3. Box-Cox Transformation (for positive data only)
df[spectral_columns] <- lapply(df[spectral_columns], function(x) {
# Ensure the data is positive by shifting values if necessary
x_shifted <- x - min(x) + 1  # Adding 1 to avoid log(0)
# Apply Box-Cox transformation, with lambda estimated from data
boxcox_transformed <- boxcox(x_shifted ~ 1, plotit = FALSE)$y
return(boxcox_transformed)
})
df <- data
View(df)
# 3. Box-Cox Transformation (for positive data only)
df[spectral_columns] <- lapply(df[spectral_columns], function(x) {
# Ensure the data is positive by shifting values if necessary
x_shifted <- x - min(x) + 1  # Adding 1 to avoid log(0)
# Apply Box-Cox transformation, with lambda estimated from data
boxcox_transformed <- boxcox(x_shifted ~ 1, plotit = FALSE)$y
return(boxcox_transformed)
})
View(df)
# 3. Box-Cox Transformation (for positive data only)
df[spectral_columns] <- lapply(df[spectral_columns], function(x) {
# Ensure the data is positive by shifting values if necessary
x_shifted <- x - min(x) + 1  # Adding 1 to avoid log(0)
# Apply Box-Cox transformation, with lambda estimated from data
boxcox_result <- boxcox(x_shifted ~ 1, plotit = FALSE)
# Extract lambda value that maximizes the log-likelihood
lambda <- boxcox_result$x[which.max(boxcox_result$y)]
# Apply Box-Cox transformation using the estimated lambda
transformed_values <- (x_shifted^lambda - 1) / lambda
return(transformed_values)
})
beep(3)
View(df)
View(data)
# Create histogram using ggplot
p_hist <- ggplot(df, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
# Create histogram using ggplot
p_hist <- ggplot(data, aes(x = .data[[col]])) +  # Use .data[[col]] to refer to column dynamically
geom_histogram(binwidth = 0.001, fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Histogram of", col), x = col, y = "Frequency") +
theme_minimal()
# Show the plot
print(p_hist)
